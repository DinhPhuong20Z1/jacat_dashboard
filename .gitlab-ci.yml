image: docker:latest

stages:
    - build
    - deploy

variables:
    PROJECT: volio
    APP_NAME: v-jacasource
    APP_NAME_ECR: v-jacasource
    VOLIO_REPOSITORY_URL: https://repo.volio.vn/
    IMAGE_TAG: $GTV_ECR_REPOSITORY_URL/$PROJECT/$APP_NAME_ECR:dev
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

services:
    -   name: docker:dind
        entrypoint: ["env", "-u", "DOCKER_HOST"]
        command: ["dockerd-entrypoint.sh"]

build:
    stage: build
    allow_failure: false
    script:
        - apk add --no-cache curl jq python2 py-pip
        - pip install awscli
        - $(aws ecr get-login --no-include-email --region ap-southeast-1)
        - echo "Building image."
        - docker pull $IMAGE_TAG || echo "Building runtime from scratch"
        - docker build --cache-from $IMAGE_TAG -t $IMAGE_TAG .
        - docker push $IMAGE_TAG
    only:
        - develop
        - master
        - /^dev-.*$/
        - /^feature\/.*$/
        - /^hotfix\/.*$/

build_prod:
    stage: build
    when: manual
    allow_failure: false
    environment:
        name: production
    script:
        - apk add --no-cache curl jq python2 py-pip
        - pip install awscli
        - $(aws ecr get-login --no-include-email --region ap-southeast-1)
        - echo "Building image:"
        - VERSION=version-$(date +%d-%b-%Y)-$CI_COMMIT_SHORT_SHA
        - IMAGE_TAG=$GTV_ECR_REPOSITORY_URL/$PROJECT/$APP_NAME_ECR:$VERSION
        - echo $IMAGE_TAG
        - docker pull $IMAGE_TAG || echo "Building runtime from scratch"
        - docker build --cache-from $IMAGE_TAG -t $IMAGE_TAG .
        - docker push $IMAGE_TAG
    only:
        - tags && master

.deploy_template:
    stage: deploy
    image: pstauffer/curl
    variables:
        WEBHOOKD_URL: http://webhook.gtvplus.vn.private/deploy
    script:
        - echo $GITLAB_USER_NAME
        - echo $CI_COMMIT_MESSAGE
        - |
            if [ "$DEPLOY_BRANCH" = "production" ]; then
                APP_IMAGE_TAG=version-$(date +%d-%b-%Y)-$CI_COMMIT_SHORT_SHA
            fi
        - echo $APP_IMAGE_TAG
        - >
            curl -G --compressed -sS
            --data-urlencode "user=${GITLAB_USER_NAME}"
            --data-urlencode "commit_message=${CI_COMMIT_MESSAGE}"
            -H 'Connection: keep-alive'
            "${WEBHOOKD_URL}?application=${APP_NAME}&branch=${DEPLOY_BRANCH}&commit=${CI_COMMIT_SHA}&version=$VERSION&app_branch=$APP_IMAGE_TAG"
            &> /dev/stdout | tee -a /tmp/status
        - grep -q "Patching done!" /tmp/status; [ $? -eq 0 ] && exit 0 || exit 1


deploy_production:
    extends: .deploy_template
    environment:
        name: production
    variables:
        DEPLOY_BRANCH: production
        APP_IMAGE_TAG: production
        VERSION: v1.0
    only:
        - tags && master
